#!/usr/bin/env bash

APP="podcatcher" # name of your release

BUILD_HOST="podbaby.me" # host where to build the release
BUILD_USER="deploy" # local user at build host
BUILD_AT="/tmp/elixir/podcatcher/builds" # build directory on build host

PORT=4000

# STAGING_HOSTS="test1.acme.org test2.acme.org" # staging / test hosts separated by space
# STAGING_USER="test" # local user at staging hosts
# TEST_AT="/test/my-erlang-app" # deploy directory on staging hosts. default is DELIVER_TO

STAGING_HOSTS="podbaby.me"
STAGING_USER="deploy"

# PRODUCTION_HOSTS="deploy1.acme.org deploy2.acme.org" # deploy / production hosts separated by space
# PRODUCTION_USER="production" # local user at deploy hosts
# DELIVER_TO="/opt/my-erlang-app" # deploy directory on production hosts
# For *Phoenix* projects, symlink prod.secret.exs to our tmp source

PRODUCTION_HOSTS="podbaby.me"
PRODUCTION_USER="deploy"
DELIVER_TO="/home/deploy/apps/podcatcher"

symlink_static(){
  status "Symlinking static assets"
  __sync_remote "
    ln -sfn $DELIVER_TO$APP/lib/$APP$RELEASE-$VERSION/priv/static $DELIVER_TO$APP/static
  "
}

pre_erlang_get_and_update_deps() {
  local _prod_secret_path="/home/deploy/apps/podcatcher/prod.secret.exs"
  if [ "$TARGET_MIX_ENV" = "prod" ]; then
    __sync_remote "
      ln -sfn '$_prod_secret_path' '$BUILD_AT/config/prod.secret.exs'
    "
  fi
}

pre_erlang_clean_compile() {
  status "Installing NPM dependencies"
  __sync_remote "
      [ -f ~/.profile ] && source ~/.profile
      set -e # fail if any command fails
      cd $BUILD_AT/assets
      npm install $SILENCE
      ./node_modules/brunch/bin/brunch b -p
      cd $BUILD_AT
      APP='$APP' MIX_ENV='$TARGET_MIX_ENV' $MIX_CMD phx.digest $SILENCE
  "
}

post_erlang_update() {
  symlink_static
}

post_upgrade_release() {
  symlink_static
}
